Exercises

1.

> How do you find related data held in two separate data tables?

You can use the JOIN method in SQL.


2. 

> Explain, in your own words, the difference between an INNER JOIN, LEFT OUTER JOIN, and RIGHT OUTER JOIN. Give a real-world example for each.

INNER JOIN - This will return a query of two or more tables where values match.
A table with a list hospital departments, their department, address, etc and a table of doctors in that hospital. Show list of doctors and what department they
belong to, join where department id matches. 

LEFT OUTER JOIN - This will return all records from the left table and any matched values from the right table
Show all data of departments and what doctors are in them


RIGHT OUTER JOIN -  This will return all records from the right table and any matched values from the left table
Show information about doctors and what department they belong to or they do not belong to one as null.


3.

> Define primary key and foreign key. Give a real-world example for each.

Primary Key - This is a unique identifier for each row in a database table. An example can include an id number.
Foreign Key - This is a primary key of one table in the database that is included a a non-unique attribute in a different table. An example could be
the number of an aisle at a grocery store that is the primary key in an aisle table, but foreign key in a product table.


4.

> Define aliasing

Aliasing is the technique of abbreviating a table name in a SQL query.


5.

> Change this query so that you are using aliasing:
SELECT p.name, c.salary, c.vacation_days
FROM professor AS p
JOIN compensation AS c
ON p.id = c.professor_id;


6.

> Why would you use a NATURAL JOIN? Give a real-world example.

NATURAL is a shorthand form of USING where the query joins tables based on shared column. 
SELECT *
FROM ip_address
NATURAL JOIN screen_name;

7. 

> Using this Employee schema and data, write queries to find the following information:

- List all employees and all shifts.

SELECT employees.name, shifts.date, shifts.start_time, shifts.end_time
FROM scheduled_shifts
JOIN employees
ON employees.id = scheduled_shifts.employee_id
JOIN shifts
ON shifts.id = scheduled_shifts.shift_id;

| name             | date       | start_time | end_time |
| ---------------- | ---------- | ---------- | -------- |
| Hermione Granger | 1998-03-09 | 08:00:00   | 16:00:00 |
| Hermione Granger | 1998-03-10 | 08:00:00   | 16:00:00 |
| Hermione Granger | 1998-03-11 | 08:00:00   | 16:00:00 |
| Hermione Granger | 1998-03-12 | 08:00:00   | 16:00:00 |
| Hermione Granger | 1998-03-13 | 08:00:00   | 16:00:00 |
| Ronald Weasley   | 1998-03-10 | 12:00:00   | 16:00:00 |
| Ronald Weasley   | 1998-03-12 | 12:00:00   | 16:00:00 |
| Luna Lovegood    | 1998-03-09 | 12:00:00   | 16:00:00 |
| Luna Lovegood    | 1998-03-11 | 12:00:00   | 16:00:00 |
| Luna Lovegood    | 1998-03-13 | 12:00:00   | 16:00:00 |
| Draco Malfoy     | 1998-03-11 | 16:00:00   | 20:00:00 |
| Draco Malfoy     | 1998-03-12 | 16:00:00   | 20:00:00 |
| Draco Malfoy     | 1998-03-13 | 16:00:00   | 20:00:00 |
| Padma Patil      | 1998-03-09 | 12:00:00   | 20:00:00 |
| Padma Patil      | 1998-03-10 | 12:00:00   | 20:00:00 |
| Padma Patil      | 1998-03-11 | 12:00:00   | 20:00:00 |
| Padma Patil      | 1998-03-09 | 08:00:00   | 12:00:00 |
| Padma Patil      | 1998-03-10 | 08:00:00   | 12:00:00 |
| Padma Patil      | 1998-03-11 | 08:00:00   | 12:00:00 |
| Cho Chang        | 1998-03-12 | 12:00:00   | 20:00:00 |
| Cho Chang        | 1998-03-13 | 12:00:00   | 20:00:00 |
| Dean Thomas      | 1998-03-09 | 16:00:00   | 20:00:00 |
| Dean Thomas      | 1998-03-10 | 16:00:00   | 20:00:00 |


8.

> Using this Adoption schema and data, please write queries to retrieve the following information and include the results:

- Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.

SELECT first_name.volunteers, volunteers.last_name, dogs.name
FROM volunteers
LEFT OUTER JOIN dogs
ON dogs.id = volunteers.foster_dog_id;

| first_name | last_name  | name      |
| ---------- | ---------- | --------- |
| Rubeus     | Hagrid     | Munchkin  |
| Marjorie   | Dursley    | Marmaduke |
| Sirius     | Black      |           |
| Remus      | Lupin      |           |
| Albus      | Dumbledore |           |


- The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail" social media promotion which posts recent successful adoptions.

SELECT cats.name, adopters.first_name, adopters.last_name, cat_adoptions.date
FROM cat_adoptions
INNER JOIN cats
ON cats.id = cat_adoptions.cat_id
INNER JOIN adopters
ON adopters.id = cat_adoptions.adopter_id
GROUP BY cats.name, adopters.first_name, adopters.last_name, cat_adoptions.date
HAVING cat_adoptions.date >= current_date - 30;

| name     | first_name | last_name | date                     |
| -------- | ---------- | --------- | ------------------------ |
| Mushi    | Arabella   | Figg      | 2019-05-25T00:00:00.000Z |
| Victoire | Argus      | Filch     | 2019-05-30T00:00:00.000Z |



- Create a list of adopters who have not yet chosen a dog to adopt.

SELECT adopters.first_name, adopters.last_name
FROM adopters
JOIN dog_adoptions
ON adopters.id != dog_adoptions.adopter_id;

| first_name | last_name |
| ---------- | --------- |
| Hermione   | Granger   |
| Arabella   | Figg      |


- Lists of all cats and all dogs who have not been adopted.

SELECT cats.name
FROM cats
LEFT OUTER JOIN cat_adoptions
ON cats.id = cat_adoptions.cat_id
WHERE cat_adoptions.adopter_id IS NULL;

SELECT dogs.name
FROM dogs
LEFT OUTER JOIN dog_adoptions
ON dogs.id = dog_adoptions.dog_id
WHERE dog_adoptions.adopter_id IS NULL; 

| name     |
| -------- |
| Seashell |
| Nala     |


| name      |
| --------- |
| Munchkin  |
| Boujee    |
| Lassie    |
| Marley    |
| Marmaduke |


- The name of the person who adopted Rosco.

SELECT adopters.first_name, adopters.last_name
FROM dog_adoptions
JOIN adopters ON adopters.id = dog_adoptions.adopter_id
JOIN dogs ON dogs.id = dog_adoptions.dog_id
WHERE dogs.name = 'Rosco';

| first_name | last_name |
| ---------- | --------- |
| Argus      | Filch     |



9.

> Using this Library schema and data, write queries applying the following scenarios and include the results:

- To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons with a hold (request for a book with all copies checked out) on "Advanced Potion-Making".

SELECT patrons.name, holds.rank
FROM holds
LEFT OUTER JOIN patrons ON patrons.id = holds.patron_id
LEFT OUTER JOIN books ON books.isbn = holds.isbn
WHERE books.title = 'Advanced Potion-Making'
ORDER BY holds.rank;

| name           | rank |
| -------------- | ---- |
| Terry Boot     | 1    |
| Cedric Diggory | 2    |


- List all of the library patrons. If they have one or more books checked out, list the books with the patrons.

SELECT patrons.name, transactions.isbn, books.title, transactions.checked_out_date, transactions.checked_in_date
FROM patrons
RIGHT OUTER JOIN transactions
ON patrons.id = transactions.patron_id
RIGHT OUTER JOIN books
ON books.isbn = transactions.isbn
ORDER BY patrons.id;

| name             | isbn       | title                                   | checked_out_date         | checked_in_date          |
| ---------------- | ---------- | --------------------------------------- | ------------------------ | ------------------------ |
| Hermione Granger | 3458400871 | Fantastic Beasts and Where to Find Them | 2019-06-11T00:00:00.000Z | 2019-06-13T00:00:00.000Z |
| Hermione Granger | 1840918626 | Hogwarts: A History                     | 2013-06-13T00:00:00.000Z | 2013-06-14T00:00:00.000Z |
| Terry Boot       | 9136884926 | Advanced Potion-Making                  | 2019-06-11T00:00:00.000Z |                          |
| Terry Boot       | 3458400871 | Fantastic Beasts and Where to Find Them | 2013-06-13T00:00:00.000Z | 2013-06-14T00:00:00.000Z |
| Padma Patil      | 3458400871 | Fantastic Beasts and Where to Find Them | 2019-06-07T00:00:00.000Z | 2019-06-10T00:00:00.000Z |
| Cho Chang        | 9136884926 | Advanced Potion-Making                  | 2013-06-13T00:00:00.000Z | 2013-06-14T00:00:00.000Z |
| Cedric Diggory   | 3458400871 | Fantastic Beasts and Where to Find Them | 2019-06-13T00:00:00.000Z |                          |
 